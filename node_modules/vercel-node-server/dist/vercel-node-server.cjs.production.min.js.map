{"version":3,"file":"vercel-node-server.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  NowRequestCookies,\n  NowRequestQuery,\n  NowRequestBody,\n  NowRequest,\n  NowResponse,\n} from '@vercel/node';\nimport { IncomingMessage, ServerResponse, Server, RequestListener } from 'http';\nimport micro, { buffer, send } from 'micro';\n// @ts-expect-error\nimport cloneResponse from 'clone-response';\n\nexport class ApiError extends Error {\n  readonly statusCode: number;\n\n  constructor(statusCode: number, message: string) {\n    super(message);\n    this.statusCode = statusCode;\n  }\n}\n\nfunction getBodyParser(req: NowRequest, body: Buffer | string) {\n  return function parseBody(): NowRequestBody {\n    if (!req.headers['content-type']) {\n      return undefined;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const { parse: parseContentType } = require('content-type');\n    const { type } = parseContentType(req.headers['content-type']);\n\n    if (type === 'application/json') {\n      try {\n        const str = body.toString();\n        return str ? JSON.parse(str) : {};\n      } catch (error) {\n        throw new ApiError(400, 'Invalid JSON');\n      }\n    }\n\n    if (type === 'application/octet-stream') {\n      return body;\n    }\n\n    if (type === 'application/x-www-form-urlencoded') {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const { parse: parseQS } = require('querystring');\n      // note: querystring.parse does not produce an iterable object\n      // https://nodejs.org/api/querystring.html#querystring_querystring_parse_str_sep_eq_options\n      return parseQS(body.toString());\n    }\n\n    if (type === 'text/plain') {\n      return body.toString();\n    }\n\n    return undefined;\n  };\n}\n\nfunction getQueryParser({ url = '/' }: NowRequest) {\n  return function parseQuery(): NowRequestQuery {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const { parse: parseURL } = require('url');\n    return parseURL(url, true).query;\n  };\n}\n\nfunction getCookieParser(req: NowRequest) {\n  return function parseCookie(): NowRequestCookies {\n    const header: undefined | string | string[] = req.headers.cookie;\n\n    if (!header) {\n      return {};\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const { parse } = require('cookie');\n    return parse(Array.isArray(header) ? header.join(';') : header);\n  };\n}\n\nfunction setLazyProp<T>(req: NowRequest, prop: string, getter: () => T) {\n  const opts = { configurable: true, enumerable: true };\n  const optsReset = { ...opts, writable: true };\n\n  Object.defineProperty(req, prop, {\n    ...opts,\n    get: () => {\n      const value = getter();\n      // we set the property on the object to avoid recalculating it\n      Object.defineProperty(req, prop, { ...optsReset, value });\n      return value;\n    },\n    set: value => {\n      Object.defineProperty(req, prop, { ...optsReset, value });\n    },\n  });\n}\n\nexport const enhanceRequest = async (req: NowRequest): Promise<NowRequest> => {\n  // We clone the request, so that we can read the incoming stream but then\n  // still allow subsequent consumers to do the same\n  const reqClone = cloneResponse(req);\n  const newReq = cloneResponse(req);\n  const body = await buffer(reqClone);\n\n  setLazyProp<NowRequestCookies>(newReq, 'cookies', getCookieParser(newReq));\n  setLazyProp<NowRequestQuery>(newReq, 'query', getQueryParser(newReq));\n  if (body != null) {\n    setLazyProp<NowRequestBody>(newReq, 'body', getBodyParser(newReq, body));\n  }\n\n  return newReq;\n};\n\nexport const enhanceResponse = (res: ServerResponse): NowResponse => {\n  let _status: number;\n  const nowRes = Object.assign(res, {\n    status: (status: number) => {\n      _status = status;\n      return nowRes;\n    },\n    json: (jsonBody: any) => {\n      send(nowRes, _status || 200, jsonBody);\n      return nowRes;\n    },\n    send: (body: string | object | Buffer) => {\n      send(nowRes, _status || 200, body);\n      return nowRes;\n    },\n    text: (body: string) => {\n      send(nowRes, _status || 200, body);\n      return nowRes;\n    },\n  });\n  return nowRes;\n};\n\nexport interface Config {\n  disableHelpers?: boolean;\n}\n\ninterface DefaultConfig {\n  disableHelpers: false;\n}\n\ntype NowRoute = (req: NowRequest, res: NowResponse) => void;\n\nexport const createServer = <C extends Config = DefaultConfig>(\n  route: C extends undefined\n    ? NowRoute\n    : C['disableHelpers'] extends true\n    ? RequestListener\n    : NowRoute,\n  config?: C\n) => {\n  if (config != null && config.disableHelpers) {\n    // @ts-expect-error\n    return new Server(route);\n  } else {\n    return micro(async (req: IncomingMessage, res: ServerResponse) => {\n      // @ts-expect-error\n      const nowReq = await enhanceRequest(req);\n      const nowRes = enhanceResponse(res);\n      return await route(nowReq, nowRes);\n    });\n  }\n};\n"],"names":["ApiError","statusCode","message","Error","setLazyProp","req","prop","getter","opts","configurable","enumerable","optsReset","writable","Object","defineProperty","get","value","set","enhanceRequest","reqClone","cloneResponse","newReq","buffer","body","url","header","headers","cookie","parse","require","Array","isArray","join","getCookieParser","parseURL","query","type","parseContentType","str","toString","JSON","error","parseQS","getBodyParser","enhanceResponse","res","_status","nowRes","assign","status","json","jsonBody","send","text","route","config","disableHelpers","Server","micro","nowReq"],"mappings":"oiDAYaA,iCAGCC,EAAoBC,8BACxBA,UACDD,WAAaA,uGALQE,QAqE9B,SAASC,EAAeC,EAAiBC,EAAcC,OAC/CC,EAAO,CAAEC,cAAc,EAAMC,YAAY,GACzCC,OAAiBH,GAAMI,UAAU,IAEvCC,OAAOC,eAAeT,EAAKC,OACtBE,GACHO,IAAK,eACGC,EAAQT,WAEdM,OAAOC,eAAeT,EAAKC,OAAWK,GAAWK,MAAAA,KAC1CA,GAETC,IAAK,SAAAD,GACHH,OAAOC,eAAeT,EAAKC,OAAWK,GAAWK,MAAAA,aAK1CE,WAAwBb,WAG7Bc,EAAWC,EAAcf,GACzBgB,EAASD,EAAcf,0BACViB,SAAOH,mBAApBI,GA7CR,MAA0BC,SA+CxBpB,EAA+BiB,EAAQ,UAvCzC,SAAyBhB,UAChB,eACCoB,EAAwCpB,EAAIqB,QAAQC,cAErDF,GAMEG,EADWC,QAAQ,UAAlBD,OACKE,MAAMC,QAAQN,GAAUA,EAAOO,KAAK,KAAOP,GAL/C,IAkCuCQ,CAAgBZ,IAClEjB,EAA6BiB,EAAQ,SAhDbG,cAgDqCH,EAhDrCG,KAAM,MACvB,kBAGEU,EADqBL,QAAQ,OAA5BD,OACQJ,GAAK,GAAMW,SA6CjB,MAARZ,GACFnB,EAA4BiB,EAAQ,OAxFxC,SAAuBhB,EAAiBkB,UAC/B,cACAlB,EAAIqB,QAAQ,qBAKTU,GAASC,EADmBR,QAAQ,gBAApCD,OAC0BvB,EAAIqB,QAAQ,iBAAtCU,QAEK,qBAATA,UAEME,EAAMf,EAAKgB,kBACVD,EAAME,KAAKZ,MAAMU,GAAO,GAC/B,MAAOG,SACD,IAAIzC,EAAS,IAAK,sBAIf,6BAAToC,EACKb,EAGI,sCAATa,GAKKM,EAHoBb,QAAQ,eAA3BD,OAGOL,EAAKgB,YAGT,eAATH,EACKb,EAAKgB,oBAyD8BI,CAActB,EAAQE,IAG7DF,yCAGIuB,EAAkB,SAACC,OAC1BC,EACEC,EAASlC,OAAOmC,OAAOH,EAAK,CAChCI,OAAQ,SAACA,UACPH,EAAUG,EACHF,GAETG,KAAM,SAACC,UACLC,OAAKL,EAAQD,GAAW,IAAKK,GACtBJ,GAETK,KAAM,SAAC7B,UACL6B,OAAKL,EAAQD,GAAW,IAAKvB,GACtBwB,GAETM,KAAM,SAAC9B,UACL6B,OAAKL,EAAQD,GAAW,IAAKvB,GACtBwB,YAGJA,2CAamB,SAC1BO,EAKAC,UAEc,MAAVA,GAAkBA,EAAOC,eAEpB,IAAIC,SAAOH,GAEXI,YAAarD,EAAsBwC,8BAEnB3B,EAAeb,mBAA9BsD,OACAZ,EAASH,EAAgBC,0BAClBS,EAAMK,EAAQZ"}