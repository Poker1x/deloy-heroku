'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var http = require('http');
var micro = require('micro');
var micro__default = _interopDefault(micro);
var cloneResponse = _interopDefault(require('clone-response'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

var ApiError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(ApiError, _Error);

  function ApiError(statusCode, message) {
    var _this;

    _this = _Error.call(this, message) || this;
    _this.statusCode = statusCode;
    return _this;
  }

  return ApiError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

function getBodyParser(req, body) {
  return function parseBody() {
    if (!req.headers['content-type']) {
      return undefined;
    } // eslint-disable-next-line @typescript-eslint/no-var-requires


    var _require = require('content-type'),
        parseContentType = _require.parse;

    var _parseContentType = parseContentType(req.headers['content-type']),
        type = _parseContentType.type;

    if (type === 'application/json') {
      try {
        var str = body.toString();
        return str ? JSON.parse(str) : {};
      } catch (error) {
        throw new ApiError(400, 'Invalid JSON');
      }
    }

    if (type === 'application/octet-stream') {
      return body;
    }

    if (type === 'application/x-www-form-urlencoded') {
      // eslint-disable-next-line @typescript-eslint/no-var-requires
      var _require2 = require('querystring'),
          parseQS = _require2.parse; // note: querystring.parse does not produce an iterable object
      // https://nodejs.org/api/querystring.html#querystring_querystring_parse_str_sep_eq_options


      return parseQS(body.toString());
    }

    if (type === 'text/plain') {
      return body.toString();
    }

    return undefined;
  };
}

function getQueryParser(_ref) {
  var _ref$url = _ref.url,
      url = _ref$url === void 0 ? '/' : _ref$url;
  return function parseQuery() {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    var _require3 = require('url'),
        parseURL = _require3.parse;

    return parseURL(url, true).query;
  };
}

function getCookieParser(req) {
  return function parseCookie() {
    var header = req.headers.cookie;

    if (!header) {
      return {};
    } // eslint-disable-next-line @typescript-eslint/no-var-requires


    var _require4 = require('cookie'),
        parse = _require4.parse;

    return parse(Array.isArray(header) ? header.join(';') : header);
  };
}

function setLazyProp(req, prop, getter) {
  var opts = {
    configurable: true,
    enumerable: true
  };

  var optsReset = _extends({}, opts, {
    writable: true
  });

  Object.defineProperty(req, prop, _extends({}, opts, {
    get: function get() {
      var value = getter(); // we set the property on the object to avoid recalculating it

      Object.defineProperty(req, prop, _extends({}, optsReset, {
        value: value
      }));
      return value;
    },
    set: function set(value) {
      Object.defineProperty(req, prop, _extends({}, optsReset, {
        value: value
      }));
    }
  }));
}

var enhanceRequest = function enhanceRequest(req) {
  try {
    // We clone the request, so that we can read the incoming stream but then
    // still allow subsequent consumers to do the same
    var reqClone = cloneResponse(req);
    var newReq = cloneResponse(req);
    return Promise.resolve(micro.buffer(reqClone)).then(function (body) {
      setLazyProp(newReq, 'cookies', getCookieParser(newReq));
      setLazyProp(newReq, 'query', getQueryParser(newReq));

      if (body != null) {
        setLazyProp(newReq, 'body', getBodyParser(newReq, body));
      }

      return newReq;
    });
  } catch (e) {
    return Promise.reject(e);
  }
};
var enhanceResponse = function enhanceResponse(res) {
  var _status;

  var nowRes = Object.assign(res, {
    status: function status(_status2) {
      _status = _status2;
      return nowRes;
    },
    json: function json(jsonBody) {
      micro.send(nowRes, _status || 200, jsonBody);

      return nowRes;
    },
    send: function send(body) {
      micro.send(nowRes, _status || 200, body);

      return nowRes;
    },
    text: function text(body) {
      micro.send(nowRes, _status || 200, body);

      return nowRes;
    }
  });
  return nowRes;
};
var createServer = function createServer(route, config) {
  if (config != null && config.disableHelpers) {
    // @ts-expect-error
    return new http.Server(route);
  } else {
    return micro__default(function (req, res) {
      try {
        // @ts-expect-error
        return Promise.resolve(enhanceRequest(req)).then(function (nowReq) {
          var nowRes = enhanceResponse(res);
          return Promise.resolve(route(nowReq, nowRes));
        });
      } catch (e) {
        return Promise.reject(e);
      }
    });
  }
};

exports.ApiError = ApiError;
exports.createServer = createServer;
exports.enhanceRequest = enhanceRequest;
exports.enhanceResponse = enhanceResponse;
//# sourceMappingURL=vercel-node-server.cjs.development.js.map
